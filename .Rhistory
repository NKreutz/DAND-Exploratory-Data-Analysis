submit()
boring_function('My first function!')
boring_function
submit()
my_mean(c(4, 5, 10))
submit()
submit()
remainder(5)
remainder(11, 5)
remainder(divisor = 11, num = 5)
remainder(4, div = 2)
args(remainder)
submit()
evaluate(stddev, c(1.4, 3.6, 7.9, 8.8))
evaluate(sd, c(1.4, 3.6, 7.9, 8.8))
evaluate(function(x){x+1}, 6)
evaluate(function(x){x[1]}, c(8, 4, 0))
evaluate(function(x){x[3]}, c(8, 4, 0))
evaluate(function(x){x[length(x)]}, c(8, 4, 0))
?paste
paste("Programming", "is", "fun")
paste("Programming", "is", "fun!")
submit()
telegram("K")
submit()
mad_libs(place = "Namao", adjective = "ran", noun = "Lucas")
submit()
'I' %p% 'love' %p% 'R!'
head(flags)
dim(flags)
class(flags)
cls_list <- lapply(flags, class)
cls_list
class(cls_list)
as.character(cls_list)
cls_vect <- sapply(flags, class)
class(cls_vect)
sum(flags$orange)
falg_colors <- flags[, 11:17]
flag_colors <- flags[, 11:17]
head(flag_colors)
lapply(falg_colors, sum)
lapply(flag_colors, sum)
sapply(flag_colors, sum)
sapply(flag_colors, mean)
flag_shapes <- flags[, 19:23]
lappy(flag_shapes, range)
lapply(flag_shapes, range)
shape_mat <- sapply(flag_shapes, range)
shape_mat
class(shape_mat)
unique(c(3, 4, 5, 5, 5, 6, 6))
unique_vals <- lappy(flags, unique)
unique_vals <- lapply(flags, unique)
unique_vals
sapply(unique_vals, length)
sapply(flags, unique)
lapply(unique_vals, function(elem) elem[2])
str()
str(flags)
?str
summary(flags)
sapply(flags, unique)
vapply(flags, unique, numeric(1))
ok()
sapply(flags, class)
vapply(flags, class, character(1))
?tapply
table(flags$landmass)
?table
table(flags$animate)
tapply(flags$animate, flags$landmass, mean)
tapply(flags$population, flags$red, summary)
tapply(flags$population, flags$landmass, summary)
ls()
class(plants)
dim(plants)
nrow(plants)
ncol(plants)
object.size(plants)
names(plants)
head(plants)
head(plants, 10)
tail(plants)
tail(plants, 15)
summary(plants)
table(plants$Active_Growth_Period)
str(plants)
?sample
sample(1:6, 4, replace = TRUE)
sample(1:6, 4, replace = TRUE)
sample(1:20, 10)
LETTERS
sample(LETTERS)
sample(c(0,1), 100, replace = TRUE, prob = c(0.3, 0.7))
flips <- sample(c(0,1), 100, replace = TRUE, prob = c(0.3, 0.7))
flips
sum(flips)
?rbinom
rbinom(1, size size = 100, prob = 0.7)
rbinom(1, size = 100, prob = 0.7)
flips2 <- rbinom(100, size = 1, prob = 0.7)
flips2
sum()
sum(flips2)
rnorm()
?rnorm
rnorm(10)
rnorm(10, mean = 100, sd = 25)
rpois(5, mean = 10)
?rpois
rpois(5)
rpois(5, lambda = c(10))
rpois(5, 10)
replicate(100, rpois(5, 10))
my_pois <- replicate(100, rpois(5, 10))
my_pois
cm <- colMeans()
cm <- colMeans(my_pois)
hist(cm)
data(diamonds)
library("ggplot2", lib.loc="/Library/Frameworks/R.framework/Versions/3.4/Resources/library")
data("diamonds")
cuberoot_trans = function() trans_new('cuberoot',
transform = function(x) x^(1/3),
inverse = function(x) x^3)
ggplot(aes(carat, price), data = diamonds) +
geom_point() +
scale_x_continuous(trans = cuberoot_trans(), limits = c(0.2, 3), breaks = c(0.2, 0.5, 1,2,3)) +
scale_y_continuous(trans = log10_trans(), limits = c(350, 15000), breaks = c(350, 1000, 5000, 10000, 15000)) +
ggtitle("Price (log 1) by Cube-Root of Carat")
cuberoot_trans = function(x) x^(1/3)
ggplot(aes(carat, price), data = diamonds) +
geom_point() +
scale_x_continuous(trans = cuberoot_trans(), limits = c(0.2, 3), breaks = c(0.2, 0.5, 1,2,3)) +
scale_y_continuous(trans = log10_trans(), limits = c(350, 15000), breaks = c(350, 1000, 5000, 10000, 15000)) +
ggtitle("Price (log 1) by Cube-Root of Carat")
cuberoot_trans = function() x^(1/3)
ggplot(aes(carat, price), data = diamonds) +
geom_point() +
scale_x_continuous(trans = cuberoot_trans(), limits = c(0.2, 3), breaks = c(0.2, 0.5, 1,2,3)) +
scale_y_continuous(trans = log10_trans(), limits = c(350, 15000), breaks = c(350, 1000, 5000, 10000, 15000)) +
ggtitle("Price (log 1) by Cube-Root of Carat")
cuberoot_trans = function(x) x^(1/3)
ggplot(aes(carat, price), data = diamonds) +
geom_point() +
scale_x_continuous(trans = cuberoot_trans(x), limits = c(0.2, 3), breaks = c(0.2, 0.5, 1,2,3)) +
scale_y_continuous(trans = log10_trans(), limits = c(350, 15000), breaks = c(350, 1000, 5000, 10000, 15000)) +
ggtitle("Price (log 1) by Cube-Root of Carat")
library("scales", lib.loc="/Library/Frameworks/R.framework/Versions/3.4/Resources/library")
cuberoot_trans = function() {trans_new('cuberoot',
transform = ,
inverse = function(x) x^3)}
ggplot(aes(carat, price), data = diamonds) +
geom_point() +
scale_x_continuous(trans = cuberoot_trans(), limits = c(0.2, 3), breaks = c(0.2, 0.5, 1,2,3)) +
scale_y_continuous(trans = log10_trans(), limits = c(350, 15000), breaks = c(350, 1000, 5000, 10000, 15000)) +
ggtitle("Price (log 1) by Cube-Root of Carat")
cuberoot_trans = function() {trans_new('cuberoot',
transform = function(x) x^(1/3),
inverse = function(x) x^3)}
ggplot(aes(carat, price), data = diamonds) +
geom_point() +
scale_x_continuous(trans = cuberoot_trans(), limits = c(0.2, 3), breaks = c(0.2, 0.5, 1,2,3)) +
scale_y_continuous(trans = log10_trans(), limits = c(350, 15000), breaks = c(350, 1000, 5000, 10000, 15000)) +
ggtitle("Price (log 1) by Cube-Root of Carat")
library("RColorBrewer", lib.loc="/Library/Frameworks/R.framework/Versions/3.4/Resources/library")
ggplot(aes(carat, price), data = diamonds) +
geom_point(alpha = 1/2, size = 3/4, position = 'jitter') +
scale_x_continuous(trans = cuberoot_trans(), limits = c(0.2, 3), breaks = c(0.2, 0.5, 1,2,3)) +
scale_y_continuous(trans = log10_trans(), limits = c(350, 15000), breaks = c(350, 1000, 5000, 10000, 15000)) +
ggtitle("Price (log 1) by Cube-Root of Carat")
ggplot(aes(carat, price), data = diamonds) +
geom_point(alpha = 1/2, size = 3/4, position = 'jitter') +
scale_color_brewer( type = 'div',
guide = guide_legend(title = 'Clarity', reverse = T, override.aes = list(alpha = 1, size = 2))
scale_x_continuous(trans = cuberoot_trans(), limits = c(0.2, 3), breaks = c(0.2, 0.5, 1,2,3)) +
scale_y_continuous(trans = log10_trans(), limits = c(350, 15000), breaks = c(350, 1000, 5000, 10000, 15000)) +
ggtitle("Price (log 1) by Cube-Root of Carat")
ggplot(aes(carat, price), data = diamonds) +
geom_point(alpha = 1/2, size = 3/4, position = 'jitter') +
scale_color_brewer( type = 'div',
guide = guide_legend(title = 'Clarity', reverse = T, override.aes = list(alpha = 1, size = 2))) +
scale_x_continuous(trans = cuberoot_trans(), limits = c(0.2, 3), breaks = c(0.2, 0.5, 1,2,3)) +
scale_y_continuous(trans = log10_trans(), limits = c(350, 15000), breaks = c(350, 1000, 5000, 10000, 15000)) +
ggtitle("Price (log 1) by Cube-Root of Carat")
ggplot(aes(x = carat, y = price, color = clarity), data = diamonds) +
geom_point(alpha = 1/2, size = 3/4, position = 'jitter') +
scale_color_brewer( type = 'div',
guide = guide_legend(title = 'Clarity', reverse = T, override.aes = list(alpha = 1, size = 2))) +
scale_x_continuous(trans = cuberoot_trans(), limits = c(0.2, 3), breaks = c(0.2, 0.5, 1,2,3)) +
scale_y_continuous(trans = log10_trans(), limits = c(350, 15000), breaks = c(350, 1000, 5000, 10000, 15000)) +
ggtitle("Price (log 1) by Cube-Root of Carat")
ggplot(aes(x = carat, y = price, color = cut), data = diamonds) +
geom_point(alpha = 1/2, size = 3/4, position = 'jitter') +
scale_color_brewer( type = 'div',
guide = guide_legend(title = 'Cut', reverse = T, override.aes = list(alpha = 1, size = 2))) +
scale_x_continuous(trans = cuberoot_trans(), limits = c(0.2, 3), breaks = c(0.2, 0.5, 1,2,3)) +
scale_y_continuous(trans = log10_trans(), limits = c(350, 15000), breaks = c(350, 1000, 5000, 10000, 15000)) +
ggtitle("Price (log 1) by Cube-Root of Carat")
ggplot(aes(x = carat, y = price, color = color), data = diamonds) +
geom_point(alpha = 1/2, size = 3/4, position = 'jitter') +
scale_color_brewer( type = 'div',
guide = guide_legend(title = 'Color', reverse = T, override.aes = list(alpha = 1, size = 2))) +
scale_x_continuous(trans = cuberoot_trans(), limits = c(0.2, 3), breaks = c(0.2, 0.5, 1,2,3)) +
scale_y_continuous(trans = log10_trans(), limits = c(350, 15000), breaks = c(350, 1000, 5000, 10000, 15000)) +
ggtitle("Price (log 1) by Cube-Root of Carat")
ggplot(aes(x = carat, y = price, color = color), data = diamonds) +
geom_point(alpha = 1/2, size = 3/4, position = 'jitter') +
scale_color_brewer( type = 'div',
guide = guide_legend(title = 'Color', override.aes = list(alpha = 1, size = 2))) +
scale_x_continuous(trans = cuberoot_trans(), limits = c(0.2, 3), breaks = c(0.2, 0.5, 1,2,3)) +
scale_y_continuous(trans = log10_trans(), limits = c(350, 15000), breaks = c(350, 1000, 5000, 10000, 15000)) +
ggtitle("Price (log 1) by Cube-Root of Carat")
m1 <- lm(I(log(price)) ~ I(carat^(1/3)), data = diamonds)
m1
library("ggplot2", lib.loc="/Library/Frameworks/R.framework/Versions/3.4/Resources/library")
library("scales", lib.loc="/Library/Frameworks/R.framework/Versions/3.4/Resources/library")
data("diamonds")
m1 <- lm(I(log(price)) ~ I(carat^(1/3)), data = diamonds)
m2 <- update(m1, ~, + carat)
m2 <- update(m1, ~ , + carat)
m2 <- update(m1, ~ . + carat)
m3 <- update(m2, ~ . + cut)
m5 <- update(m4, ~ . + clarity)
m4 <- update(m3, ~ . + color)
m5 <- update(m4, ~ . + clarity)
mtable(m1, m2, m3, m4, m5)
library("memisc", lib.loc="/Library/Frameworks/R.framework/Versions/3.4/Resources/library")
mtable(m1, m2, m3, m4, m5)
install.packages("RCurl")
install.packages("bitops")
library("bitops", lib.loc="/Library/Frameworks/R.framework/Versions/3.4/Resources/library")
library("RCurl", lib.loc="/Library/Frameworks/R.framework/Versions/3.4/Resources/library")
diamondsurl = getBinaryURL('https://row.github.com/solomonm/diamonds-data/master/BigDiamonds.Rda')
load(rawConnection(diamondsurl))
diamondsurl = getBinaryURL('https://raw.github.com/solomonm/diamonds-data/master/BigDiamonds.Rda')
load(rawConnection(diamondsurl))
diamondsurl = getBinaryURL("https://raw.github.com/solomonm/diamonds-data/master/BigDiamonds.Rda")
load(rawConnection(diamondsurl))
diamondsurl = getBinaryURL("https://raw.github.com/solomonm/diamonds-data/master/BigDiamonds.rda")
load(rawConnection(diamondsurl))
diamondsurl = getBinaryURL("https://raw.github.com/solomonMg/diamonds-data/master/BigDiamonds.rda")
load(rawConnection(diamondsurl))
diamondsurl
setwd("~/Dropbox/Udacity/Data_Analysis_ND/Exploratory Data Analysis/eda-course-materials/lesson6")
load("~/Dropbox/Udacity/Data_Analysis_ND/Exploratory Data Analysis/eda-course-materials/lesson6/BigDiamonds.Rda")
m1 <- lm(I(log(price)) ~ I(carat^(1/3)), data = diamondsbig)
m2 <- update(m1, ~ . + carat)
m3 <- update(m2, ~ . + cut)
m4 <- update(m3, ~ . + color)
m5 <- update(m4, ~ . + clarity)
mtable(m1, m2, m3, m4, m5)
diamondsbig$logprice = log(diamondsbig$price)
m1 <- lm(logprice ~ I(carat^(1/3)),
data = diamondsbig[diamondsbig$price < 10000 & diamondsbig$cert == "GIA"])
m2 <- update(m1, ~ . + carat)
diamondsbig$logprice = log(diamondsbig$price)
m1 <- lm(logprice ~ I(carat^(1/3)),
data = diamondsbig[diamondsbig$price < 10000 & diamondsbig$cert == "GIA"])
m1 <- lm(logprice ~ I(carat^(1/3)),
data = diamondsbig[(diamondsbig$price < 10000) & (diamondsbig$cert == "GIA")])
m1 <- lm(logprice ~ I(carat^(1/3)),
data = subset(diamondsbig, (diamondsbig$price < 10000) & (diamondsbig$cert == "GIA")))
m2 <- update(m1, ~ . + carat)
m3 <- update(m2, ~ . + cut)
m4 <- update(m3, ~ . + color)
m5 <- update(m4, ~ . + clarity)
mtable(m1, m2, m3, m4, m5)
thisDiamond = data.frame(carat = 1.00, cut = "V.Good", color = "I", clarity = "VS1")
modelEstimate = predict(m5, newdata = thisDiamond, interval = 'prediction', level = 0.95)
exp(modelEstimate)
thisDiamond <- data.frame(carat = 1.00, cut = "V.Good", color = "I", clarity = "VS1")
modelEstimate <- predict(m5, newdata = thisDiamond, interval = 'prediction', level = 0.95)
exp(modelEstimate)
rm(m1)
rm(m2)
rm(m3)
rm(m4)
rm(m5)
rm(diamonds)
rm(diamondsbig)
rm(thisDiamond)
rm(diamondsurl)
rm(modelEstimate)
setwd("~/Dropbox/Udacity/Data_Analysis_ND/Exploratory Data Analysis/Explore and Summarize Data Project")
library(GGally)
library(ggplot2)
white.wine <- read.csv("wineQualityWhites.csv")
ggplot(aes(x = alcohol), data = white.wine) +
geom_histogram(binwidth = 0.5) +
scale_x_continuous(breaks = seq(7, 15, 1)) +
xlab("Alcohol Content (%)")
ggplot(aes(x = fixed.acidity), data = white.wine) +
geom_line()
ggplot(aes(x = fixed.acidity), data = white.wine) +
geom_bar()
ggplot(aes(x = fixed.acidity), data = white.wine) +
geom_bar(binwidth = 1)
ggplot(aes(x = fixed.acidity), data = white.wine) +
geom_bar(binwidth = 0.5)
ggplot(aes(x = fixed.acidity), data = white.wine) +
geom_histogram(binwidth = 0.5)
ggplot(aes(x = fixed.acidity), data = white.wine) +
geom_histogram(binwidth = 0.5) +
scale_x_continuous(breaks = seq(3, 15, 1))
ggplot(aes(x = fixed.acidity), data = white.wine, fill = 'yellow') +
geom_histogram(binwidth = 0.5) +
scale_x_continuous(breaks = seq(3, 15, 1))
ggplot(aes(x = fixed.acidity), data = white.wine, fill = 'red') +
geom_histogram(binwidth = 0.5) +
scale_x_continuous(breaks = seq(3, 15, 1))
ggplot(aes(x = fixed.acidity, color = "red"), data = white.wine) +
geom_histogram(binwidth = 0.5) +
scale_x_continuous(breaks = seq(3, 15, 1))
ggplot(aes(x = fixed.acidity, fill = "red"), data = white.wine) +
geom_histogram(binwidth = 0.5) +
scale_x_continuous(breaks = seq(3, 15, 1))
ggplot(aes(x = fixed.acidity, fill = "red", color = "black"), data = white.wine) +
geom_histogram(binwidth = 0.5) +
scale_x_continuous(breaks = seq(3, 15, 1))
ggplot(aes(x = alcohol, fill = I('red')), data = white.wine) +
geom_histogram(binwidth = 0.5) +
scale_x_continuous(breaks = seq(7, 15, 1)) +
xlab("Alcohol Content (%)")
ggplot(aes(x = alcohol, fill = I('red'), color = I('black')), data = white.wine) +
geom_histogram(binwidth = 0.5) +
scale_x_continuous(breaks = seq(7, 15, 1)) +
xlab("Alcohol Content (%)")
ggplot(aes(x = fixed.acidity, fill = I('red'), color = I('black')), data = white.wine) +
geom_histogram(binwidth = 0.5) +
scale_x_continuous(breaks = seq(3, 15, 1))
qplot(data = white.wine, x = quality, fill = I('red'), color = I('black'))
qplot(data = white.wine, x = quality)
qplot(data = white.wine, x = quality, binwidth = 1)
qplot(data = white.wine, x = quality, binwidth = 1, fill = I('red')), color = I('black')
qplot(data = white.wine, x = quality, binwidth = 1, fill = I('red'), color = I('black'))
ggplot(aes(x = fixed.acidity), data = white.wine) +
geom_boxplot()
ggplot(aes(x = alcohol, fill = I('red'), color = I('black')), data = white.wine) +
geom_histogram(binwidth = 0.1) +
scale_x_continuous(breaks = seq(7, 15, 1)) +
xlab("Alcohol Content (%)")
ggplot(aes(x = fixed.acidity, fill = I('red'), color = I('black')), data = white.wine) +
geom_histogram(binwidth = 0.1) +
scale_x_continuous(breaks = seq(3, 15, 1))
ggplot(aes(x = fixed.acidity, fill = I('red'), color = I('black')), data = white.wine) +
geom_histogram(binwidth = 0.5)
ggplot(aes(x = fixed.acidity, fill = I('red'), color = I('black')), data = white.wine) +
geom_histogram(binwidth = 0.5) +
scale_x_continuous(breaks = seq(3, 15, 1))
table(white.wine$fixed.acidity)
table(white.wine$fixed.acidity > 11)
subset(white.wine, fixed.acidity > 11)
subset(white.wine$quality, fixed.acidity > 11)
subset(white.wine, fixed.acidity > 11)
high_fixed_acidity$quality
high_fixed_acidity <- subset(white.wine, fixed.acidity > 11)
high_fixed_acidity$quality
ggplot(aes(x = volatile.acidity), data data = white.wine) +
ggplot(aes(x = volatile.acidity, data data = white.wine) +
ggplot(aes(x = volatile.acidity, data = white.wine) +
geom_histogram()
ggplot(aes(x = volatile.acidity, data = white.wine) +
ggplot(aes(x = volatile.acidity), data = white.wine) +
geom_histogram()
ggplot(aes(x = volatile.acidity), data = white.wine) +
geom_histogram(binwidth = 0.01)
ggplot(aes(x = volatile.acidity, fill = I("red"), color = I("black")), data = white.wine) +
geom_histogram(binwidth = 0.01)
ggplot(aes(x = volatile.acidity, fill = I('red), color = I('black)), data = white.wine) +
ggplot(aes(x = volatile.acidity, fill = I('red'), color = I('black')), data = white.wine) +
geom_histogram(binwidth = 0.5)
ggplot(aes(x = volatile.acidity, fill = I('red'), color = I('black')), data = white.wine) +
geom_histogram(binwidth = 0.1)
ggplot(aes(x = volatile.acidity, fill = I('red'), color = I('black')), data = white.wine) +
geom_histogram(binwidth = 0.05)
ggplot(aes(x = volatile.acidity, fill = I("red"), color = I("black")), data = white.wine) +
geom_histogram(binwidth = 0.01) +
scale_x_continuous(breaks = (0, 1.2, 0.1))
ggplot(aes(x = volatile.acidity, fill = I("red"), color = I("black")), data = white.wine) +
geom_histogram(binwidth = 0.01) +
scale_x_continuous(breaks = seq(0, 1.2, 0.1))
ggplot(aes(x = volatile.acidity, fill = I('red'), color = I('black')), data = white.wine) +
geom_histogram(binwidth = 0.05) +
scale_x_continuous(breaks = seq(0, 1.2, 0.1))
ggplot(aes(x = citric.acid, fill = I('red'), color = I('black')), data = white.wine) +
geom_histogram(binwidth = 0.01) +
scale_x_continuous(breaks = seq(0, 1.7, 0.1))
ggplot(aes(x = citric.acid, fill = I('red'), color = I('black')), data = white.wine) +
geom_histogram(binwidth = 0.05) +
scale_x_continuous(breaks = seq(0, 1.7, 0.1))
table(white.wine$citric.acid > 0.9)
high_citric_acid <- subset(white.wine, citric.acid > 0.9)
high_citric_acid$quality
ggplot(aes(x = residual.sugar, fill = I('red'), color = I('black')), data = white.wine) +
geom_histogram(binwidth = 0.05) +
scale_x_continuous(breaks = seq(0, 67, 5))
ggplot(aes(x = residual.sugar, fill = I('red'), color = I('black')), data = white.wine) +
geom_histogram(binwidth = 1) +
scale_x_continuous(breaks = seq(0, 67, 5))
ggplot(aes(x = residual.sugar, fill = I('red'), color = I('black')), data = white.wine) +
geom_histogram(binwidth = 1) +
scale_x_continuous(breaks = seq(0, 67, 5), xlim = c(0, 20))
ggplot(aes(x = residual.sugar, fill = I('red'), color = I('black')), data = white.wine) +
geom_histogram(binwidth = 1) +
scale_x_continuous(breaks = seq(0, 67, 5), lim = c(0, 20))
ggplot(aes(x = residual.sugar, fill = I('red'), color = I('black')), data = white.wine) +
geom_histogram(binwidth = 1) +
scale_x_continuous(breaks = seq(0, 67, 5), lim = c(0, 20)) +
xlab("Residual Sugars (g/dm^3")
ggplot(aes(x = residual.sugar, fill = I('red'), color = I('black')), data = white.wine) +
geom_histogram(binwidth = 1) +
scale_x_continuous(breaks = seq(0, 67, 5), lim = c(0, 20)) +
xlab("Residual Sugars (g/dm^3)")
ggplot(aes(x = residual.sugar, fill = I('red'), color = I('black')), data = white.wine) +
geom_histogram(binwidth = 1) +
scale_x_log10(breaks = seq(0, 67, 5), lim = c(0, 20)) +
xlab("Residual Sugars (g/dm^3)")
ggplot(aes(x = residual.sugar, fill = I('red'), color = I('black')), data = white.wine) +
geom_histogram(binwidth = 1) +
scale_x_log10(breaks = seq(0, 67, 5)) +
xlab("Residual Sugars (g/dm^3)")
ggplot(aes(x = residual.sugar, fill = I('red'), color = I('black')), data = white.wine) +
geom_histogram() +
scale_x_log10(breaks = seq(0, 67, 5)) +
xlab("Residual Sugars (g/dm^3)")
ggplot(aes(x = residual.sugar, fill = I('red'), color = I('black')), data = white.wine) +
geom_histogram(binwidth = 0.01) +
scale_x_log10(breaks = seq(0, 67, 5)) +
xlab("Residual Sugars (g/dm^3)")
ggplot(aes(x = residual.sugar, fill = I('red'), color = I('black')), data = white.wine) +
geom_histogram(binwidth = 0.1) +
scale_x_log10(breaks = seq(0, 67, 5)) +
xlab("Residual Sugars (g/dm^3)")
ggplot(aes(x = residual.sugar, fill = I('red'), color = I('black')), data = white.wine) +
geom_histogram(binwidth = 0.1) +
scale_x_log10(breaks = seq(0, 20, 1)) +
xlab("Residual Sugars (g/dm^3)")
ggplot(aes(x = residual.sugar, fill = I('red'), color = I('black')), data = white.wine) +
geom_histogram(binwidth = 0.1) +
scale_x_log10(breaks = seq(0, 20, 1)) +
xlim(20)
ggplot(aes(x = residual.sugar, fill = I('red'), color = I('black')), data = white.wine) +
geom_histogram(binwidth = 0.1) +
scale_x_log10(breaks = seq(0, 20, 1)) +
xlab("Residual Sugars (g/dm^3)")
ggplot(aes(x = chlorides, fill = I('red'), color = I('black')), data = white.wine) +
geom_histogram(binwidth = 0.1) +
scale_x_continuous() +
xlab("Chlorides (g/dm^3)")
ggplot(aes(x = chlorides, fill = I('red'), color = I('black')), data = white.wine) +
geom_histogram(binwidth = 0.001) +
scale_x_continuous() +
xlab("Chlorides (g/dm^3)")
ggplot(aes(x = chlorides, fill = I('red'), color = I('black')), data = white.wine) +
geom_histogram(binwidth = 0.01) +
scale_x_continuous() +
xlab("Chlorides (g/dm^3)")
ggplot(aes(x = chlorides, fill = I('red'), color = I('black')), data = white.wine) +
geom_histogram(binwidth = 0.01) +
scale_x_continuous(breaks = seq(0, 0.45, 0.05)) +
xlab("Chlorides (g/dm^3)")
ggplot(aes(x = chlorides, fill = I('red'), color = I('black')), data = white.wine) +
geom_histogram(binwidth = 0.01) +
scale_x_continuous(breaks = seq(0, 0.45, 0.01)) +
xlab("Chlorides (g/dm^3)")
ggplot(aes(x = chlorides, fill = I('red'), color = I('black')), data = white.wine) +
geom_histogram(binwidth = 0.01) +
scale_x_continuous(breaks = seq(0, 0.45, 0.05)) +
xlab("Chlorides (g/dm^3)")
ggplot(aes(x = chlorides, fill = I('red'), color = I('black')), data = white.wine) +
geom_histogram(binwidth = 0.01) +
scale_x_continuous(breaks = seq(0, 0.45, 0.05), lim = c(0,0.11)) +
xlab("Chlorides (g/dm^3)")
ggplot(aes(x = free.sulfur.dioxide, fill = I('red'), color = I('black')), data = white.wine) +
geom_histogram(binwidth = 0.01) +
scale_x_continuous() +
xlab("Chlorides (g/dm^3)")
ggplot(aes(x = free.sulfur.dioxide, fill = I('red'), color = I('black')), data = white.wine) +
geom_histogram(binwidth = 1) +
scale_x_continuous() +
xlab("Free Sulfur Dioxide (g/dm^3)")
ggplot(aes(x = free.sulfur.dioxide, fill = I('red'), color = I('black')), data = white.wine) +
geom_histogram(binwidth = 10) +
scale_x_continuous() +
xlab("Free Sulfur Dioxide (g/dm^3)")
ggplot(aes(x = total.sulfur.dioxide, fill = I('red'), color = I('black')), data = white.wine) +
geom_histogram(binwidth = 10) +
scale_x_continuous() +
xlab("Total Sulfur Dioxide (g/dm^3)")
with(white.wine, corr.test(total.sulfur.dioxide, free.sulfur.dioxide))
library("dplyr", lib.loc="/Library/Frameworks/R.framework/Versions/3.4/Resources/library")
with(white.wine, corr.test(total.sulfur.dioxide, free.sulfur.dioxide))
detach("package:dplyr", unload=TRUE)
library("alr3", lib.loc="/Library/Frameworks/R.framework/Versions/3.4/Resources/library")
with(white.wine, corr.test(total.sulfur.dioxide, free.sulfur.dioxide))
detach("package:alr3", unload=TRUE)
library("evaluate", lib.loc="/Library/Frameworks/R.framework/Versions/3.4/Resources/library")
with(white.wine, corr.test(total.sulfur.dioxide, free.sulfur.dioxide))
detach("package:evaluate", unload=TRUE)
library("gridExtra", lib.loc="/Library/Frameworks/R.framework/Versions/3.4/Resources/library")
with(white.wine, corr.test(total.sulfur.dioxide, free.sulfur.dioxide))
detach("package:gridExtra", unload=TRUE)
detach("package:lattice", unload=TRUE)
detach("package:MASS", unload=TRUE)
detach("package:memisc", unload=TRUE)
library("reshape2", lib.loc="/Library/Frameworks/R.framework/Versions/3.4/Resources/library")
with(white.wine, corr.test(total.sulfur.dioxide, free.sulfur.dioxide))
detach("package:reshape2", unload=TRUE)
detach("package:scales", unload=TRUE)
install.packages("Psych")

!(5 == 7)
FALSE & FALSE
TRUE & c(TRUE, FALSE, FALSE)
TRUE && c(TRUE, FALSE, FALSE)
TRUE | c(TRUE, FALSE, FALSE)
TRUE || c(TRUE, FALSE, FALSE)
5 > 8 || 6 != 8 && 4 > 3.9
isTRUE(6>4)
identical('twins', 'twins')
xor(5 == 6, !FALSE)
ints <- sample(10)
ints
ints > 5
which(ints > 7)
any(ints < 0)
all(ints > 0)
swirl()
Sys.Date
Sys.Date()
mean(c(2, 4,5))
submit()
boring_function('My first function!')
boring_function
submit()
my_mean(c(4, 5, 10))
submit()
submit()
remainder(5)
remainder(11, 5)
remainder(divisor = 11, num = 5)
remainder(4, div = 2)
args(remainder)
submit()
evaluate(stddev, c(1.4, 3.6, 7.9, 8.8))
evaluate(sd, c(1.4, 3.6, 7.9, 8.8))
evaluate(function(x){x+1}, 6)
evaluate(function(x){x[1]}, c(8, 4, 0))
evaluate(function(x){x[3]}, c(8, 4, 0))
evaluate(function(x){x[length(x)]}, c(8, 4, 0))
?paste
paste("Programming", "is", "fun")
paste("Programming", "is", "fun!")
submit()
telegram("K")
submit()
mad_libs(place = "Namao", adjective = "ran", noun = "Lucas")
submit()
'I' %p% 'love' %p% 'R!'
head(flags)
dim(flags)
class(flags)
cls_list <- lapply(flags, class)
cls_list
class(cls_list)
as.character(cls_list)
cls_vect <- sapply(flags, class)
class(cls_vect)
sum(flags$orange)
falg_colors <- flags[, 11:17]
flag_colors <- flags[, 11:17]
head(flag_colors)
lapply(falg_colors, sum)
lapply(flag_colors, sum)
sapply(flag_colors, sum)
sapply(flag_colors, mean)
flag_shapes <- flags[, 19:23]
lappy(flag_shapes, range)
lapply(flag_shapes, range)
shape_mat <- sapply(flag_shapes, range)
shape_mat
class(shape_mat)
unique(c(3, 4, 5, 5, 5, 6, 6))
unique_vals <- lappy(flags, unique)
unique_vals <- lapply(flags, unique)
unique_vals
sapply(unique_vals, length)
sapply(flags, unique)
lapply(unique_vals, function(elem) elem[2])
str()
str(flags)
?str
summary(flags)
sapply(flags, unique)
vapply(flags, unique, numeric(1))
ok()
sapply(flags, class)
vapply(flags, class, character(1))
?tapply
table(flags$landmass)
?table
table(flags$animate)
tapply(flags$animate, flags$landmass, mean)
tapply(flags$population, flags$red, summary)
tapply(flags$population, flags$landmass, summary)
ls()
class(plants)
dim(plants)
nrow(plants)
ncol(plants)
object.size(plants)
names(plants)
head(plants)
head(plants, 10)
tail(plants)
tail(plants, 15)
summary(plants)
table(plants$Active_Growth_Period)
str(plants)
?sample
sample(1:6, 4, replace = TRUE)
sample(1:6, 4, replace = TRUE)
sample(1:20, 10)
LETTERS
sample(LETTERS)
sample(c(0,1), 100, replace = TRUE, prob = c(0.3, 0.7))
flips <- sample(c(0,1), 100, replace = TRUE, prob = c(0.3, 0.7))
flips
sum(flips)
?rbinom
rbinom(1, size size = 100, prob = 0.7)
rbinom(1, size = 100, prob = 0.7)
flips2 <- rbinom(100, size = 1, prob = 0.7)
flips2
sum()
sum(flips2)
rnorm()
?rnorm
rnorm(10)
rnorm(10, mean = 100, sd = 25)
rpois(5, mean = 10)
?rpois
rpois(5)
rpois(5, lambda = c(10))
rpois(5, 10)
replicate(100, rpois(5, 10))
my_pois <- replicate(100, rpois(5, 10))
my_pois
cm <- colMeans()
cm <- colMeans(my_pois)
hist(cm)
data(diamonds)
library("ggplot2", lib.loc="/Library/Frameworks/R.framework/Versions/3.4/Resources/library")
data("diamonds")
cuberoot_trans = function() trans_new('cuberoot',
transform = function(x) x^(1/3),
inverse = function(x) x^3)
ggplot(aes(carat, price), data = diamonds) +
geom_point() +
scale_x_continuous(trans = cuberoot_trans(), limits = c(0.2, 3), breaks = c(0.2, 0.5, 1,2,3)) +
scale_y_continuous(trans = log10_trans(), limits = c(350, 15000), breaks = c(350, 1000, 5000, 10000, 15000)) +
ggtitle("Price (log 1) by Cube-Root of Carat")
cuberoot_trans = function(x) x^(1/3)
ggplot(aes(carat, price), data = diamonds) +
geom_point() +
scale_x_continuous(trans = cuberoot_trans(), limits = c(0.2, 3), breaks = c(0.2, 0.5, 1,2,3)) +
scale_y_continuous(trans = log10_trans(), limits = c(350, 15000), breaks = c(350, 1000, 5000, 10000, 15000)) +
ggtitle("Price (log 1) by Cube-Root of Carat")
cuberoot_trans = function() x^(1/3)
ggplot(aes(carat, price), data = diamonds) +
geom_point() +
scale_x_continuous(trans = cuberoot_trans(), limits = c(0.2, 3), breaks = c(0.2, 0.5, 1,2,3)) +
scale_y_continuous(trans = log10_trans(), limits = c(350, 15000), breaks = c(350, 1000, 5000, 10000, 15000)) +
ggtitle("Price (log 1) by Cube-Root of Carat")
cuberoot_trans = function(x) x^(1/3)
ggplot(aes(carat, price), data = diamonds) +
geom_point() +
scale_x_continuous(trans = cuberoot_trans(x), limits = c(0.2, 3), breaks = c(0.2, 0.5, 1,2,3)) +
scale_y_continuous(trans = log10_trans(), limits = c(350, 15000), breaks = c(350, 1000, 5000, 10000, 15000)) +
ggtitle("Price (log 1) by Cube-Root of Carat")
library("scales", lib.loc="/Library/Frameworks/R.framework/Versions/3.4/Resources/library")
cuberoot_trans = function() {trans_new('cuberoot',
transform = ,
inverse = function(x) x^3)}
ggplot(aes(carat, price), data = diamonds) +
geom_point() +
scale_x_continuous(trans = cuberoot_trans(), limits = c(0.2, 3), breaks = c(0.2, 0.5, 1,2,3)) +
scale_y_continuous(trans = log10_trans(), limits = c(350, 15000), breaks = c(350, 1000, 5000, 10000, 15000)) +
ggtitle("Price (log 1) by Cube-Root of Carat")
cuberoot_trans = function() {trans_new('cuberoot',
transform = function(x) x^(1/3),
inverse = function(x) x^3)}
ggplot(aes(carat, price), data = diamonds) +
geom_point() +
scale_x_continuous(trans = cuberoot_trans(), limits = c(0.2, 3), breaks = c(0.2, 0.5, 1,2,3)) +
scale_y_continuous(trans = log10_trans(), limits = c(350, 15000), breaks = c(350, 1000, 5000, 10000, 15000)) +
ggtitle("Price (log 1) by Cube-Root of Carat")
library("RColorBrewer", lib.loc="/Library/Frameworks/R.framework/Versions/3.4/Resources/library")
ggplot(aes(carat, price), data = diamonds) +
geom_point(alpha = 1/2, size = 3/4, position = 'jitter') +
scale_x_continuous(trans = cuberoot_trans(), limits = c(0.2, 3), breaks = c(0.2, 0.5, 1,2,3)) +
scale_y_continuous(trans = log10_trans(), limits = c(350, 15000), breaks = c(350, 1000, 5000, 10000, 15000)) +
ggtitle("Price (log 1) by Cube-Root of Carat")
ggplot(aes(carat, price), data = diamonds) +
geom_point(alpha = 1/2, size = 3/4, position = 'jitter') +
scale_color_brewer( type = 'div',
guide = guide_legend(title = 'Clarity', reverse = T, override.aes = list(alpha = 1, size = 2))
scale_x_continuous(trans = cuberoot_trans(), limits = c(0.2, 3), breaks = c(0.2, 0.5, 1,2,3)) +
scale_y_continuous(trans = log10_trans(), limits = c(350, 15000), breaks = c(350, 1000, 5000, 10000, 15000)) +
ggtitle("Price (log 1) by Cube-Root of Carat")
ggplot(aes(carat, price), data = diamonds) +
geom_point(alpha = 1/2, size = 3/4, position = 'jitter') +
scale_color_brewer( type = 'div',
guide = guide_legend(title = 'Clarity', reverse = T, override.aes = list(alpha = 1, size = 2))) +
scale_x_continuous(trans = cuberoot_trans(), limits = c(0.2, 3), breaks = c(0.2, 0.5, 1,2,3)) +
scale_y_continuous(trans = log10_trans(), limits = c(350, 15000), breaks = c(350, 1000, 5000, 10000, 15000)) +
ggtitle("Price (log 1) by Cube-Root of Carat")
ggplot(aes(x = carat, y = price, color = clarity), data = diamonds) +
geom_point(alpha = 1/2, size = 3/4, position = 'jitter') +
scale_color_brewer( type = 'div',
guide = guide_legend(title = 'Clarity', reverse = T, override.aes = list(alpha = 1, size = 2))) +
scale_x_continuous(trans = cuberoot_trans(), limits = c(0.2, 3), breaks = c(0.2, 0.5, 1,2,3)) +
scale_y_continuous(trans = log10_trans(), limits = c(350, 15000), breaks = c(350, 1000, 5000, 10000, 15000)) +
ggtitle("Price (log 1) by Cube-Root of Carat")
ggplot(aes(x = carat, y = price, color = cut), data = diamonds) +
geom_point(alpha = 1/2, size = 3/4, position = 'jitter') +
scale_color_brewer( type = 'div',
guide = guide_legend(title = 'Cut', reverse = T, override.aes = list(alpha = 1, size = 2))) +
scale_x_continuous(trans = cuberoot_trans(), limits = c(0.2, 3), breaks = c(0.2, 0.5, 1,2,3)) +
scale_y_continuous(trans = log10_trans(), limits = c(350, 15000), breaks = c(350, 1000, 5000, 10000, 15000)) +
ggtitle("Price (log 1) by Cube-Root of Carat")
ggplot(aes(x = carat, y = price, color = color), data = diamonds) +
geom_point(alpha = 1/2, size = 3/4, position = 'jitter') +
scale_color_brewer( type = 'div',
guide = guide_legend(title = 'Color', reverse = T, override.aes = list(alpha = 1, size = 2))) +
scale_x_continuous(trans = cuberoot_trans(), limits = c(0.2, 3), breaks = c(0.2, 0.5, 1,2,3)) +
scale_y_continuous(trans = log10_trans(), limits = c(350, 15000), breaks = c(350, 1000, 5000, 10000, 15000)) +
ggtitle("Price (log 1) by Cube-Root of Carat")
ggplot(aes(x = carat, y = price, color = color), data = diamonds) +
geom_point(alpha = 1/2, size = 3/4, position = 'jitter') +
scale_color_brewer( type = 'div',
guide = guide_legend(title = 'Color', override.aes = list(alpha = 1, size = 2))) +
scale_x_continuous(trans = cuberoot_trans(), limits = c(0.2, 3), breaks = c(0.2, 0.5, 1,2,3)) +
scale_y_continuous(trans = log10_trans(), limits = c(350, 15000), breaks = c(350, 1000, 5000, 10000, 15000)) +
ggtitle("Price (log 1) by Cube-Root of Carat")
m1 <- lm(I(log(price)) ~ I(carat^(1/3)), data = diamonds)
m1
library(ggplot2)
library(ggplot2)
library(GGally)
library(RColorBrewer)
library(gridExtra)
setwd("~/Dropbox/Udacity/Data_Analysis_ND/Exploratory Data Analysis/Explore and Summarize Data Project")
white.wine <- read.csv("wineQualityWhites.csv")
str(white.wine)
white.wine$quality <- factor(white.wine$quality)
str(white.wine)
levels(white.wine$quality)
ggplot(aes(x = quality, fill = I('red'), color = I('black')), data = white.wine) +
geom_bar() +
xlab("Quality Level")
table(white.wine$quality)
summary(white.wine)
head(white.wine)
ggplot(aes(x = fixed.acidity, fill = I('red'), color = I('black')), data = white.wine) +
geom_histogram(binwidth = 0.1) +
scale_x_continuous(breaks = seq(3, 15, 1)) +
xlab("Fixed Acidity (g/dm^3)")
ggplot(aes(x = fixed.acidity, fill = I('red'), color = I('black')), data = white.wine) +
geom_histogram(binwidth = 0.5) +
scale_x_continuous(breaks = seq(3, 15, 1), limits = c(4, 11)) +
xlab("Fixed Acidity (g/dm^3)")
table(white.wine$fixed.acidity > 11)
high_fixed_acidity <- subset(white.wine, fixed.acidity > 11)
high_fixed_acidity$quality
ggplot(aes(x = volatile.acidity, fill = I("red"), color = I("black")), data = white.wine) +
geom_histogram(binwidth = 0.01) +
scale_x_continuous(breaks = seq(0, 1.2, 0.1)) +
xlab("Volatile Acidity (g/dm^3)")
ggplot(aes(x = volatile.acidity, fill = I('red'), color = I('black')), data = white.wine) +
geom_histogram(binwidth = 0.05) +
scale_x_continuous(breaks = seq(0, 1.2, 0.1), limits = c(0, 0.75)) +
xlab("Volatile Acidity (g/dm^3)")
with(white.wine, cor.test(fixed.acidity, volatile.acidity))
ggplot(aes(x = citric.acid, fill = I('red'), color = I('black')), data = white.wine) +
geom_histogram(binwidth = 0.05) +
scale_x_continuous(breaks = seq(0, 1.7, 0.1)) +
xlab("Citric Acid (g/dm^3)")
ggplot(aes(x = citric.acid), data = white.wine) +
geom_freqpoly(binwidth = 0.05) +
scale_x_continuous(breaks = seq(0, 1.7, 0.1)) +
xlab("Citric Acid (g/dm^3)")
table(white.wine$citric.acid > 0.9)
high_citric_acid <- subset(white.wine, citric.acid > 0.9)
high_citric_acid$quality
ggplot(aes(x = residual.sugar, fill = I('red'), color = I('black')), data = white.wine) +
geom_histogram(binwidth = 1) +
scale_x_continuous(breaks = seq(0, 67, 5)) +
xlab("Residual Sugar (g/dm^3)")
ggplot(aes(x = residual.sugar, fill = I('red'), color = I('black')), data = white.wine) +
geom_histogram(binwidth = 1) +
scale_x_continuous(breaks = seq(0, 20, 1), lim = c(0, 20)) +
xlab("Residual Sugars (g/dm^3)")
table(white.wine$residual.sugar > 20)
sweet_wines <- subset(white.wine, residual.sugar > 20)
sweet_wines$quality
ggplot(aes(x = chlorides, fill = I('red'), color = I('black')), data = white.wine) +
geom_histogram(binwidth = 0.01) +
scale_x_continuous(breaks = seq(0, 0.45, 0.05)) +
xlab("Chlorides (g/dm^3)")
ggplot(aes(x = chlorides, fill = I('red'), color = I('black')), data = white.wine) +
geom_histogram(binwidth = 0.01) +
scale_x_continuous(breaks = seq(0, 0.45, 0.01), lim = c(0,0.11)) +
xlab("Chlorides (g/dm^3)")
ggplot(aes(x = free.sulfur.dioxide, fill = I('red'), color = I('black')), data = white.wine) +
geom_histogram(binwidth = 10) +
scale_x_continuous(breaks = seq(0, 300, 20)) +
xlab("Free Sulfur Dioxide (mg/dm^3)")
ggplot(aes(x = total.sulfur.dioxide, fill = I('red'), color = I('black')), data = white.wine) +
geom_histogram(binwidth = 10) +
scale_x_continuous(breaks = seq(0, 450, 25)) +
xlab("Total Sulfur Dioxide (mg/dm^3)")
with(white.wine, cor.test(total.sulfur.dioxide, free.sulfur.dioxide))
white.wine <- transform(white.wine, prop.sulfur.dioxide = free.sulfur.dioxide / total.sulfur.dioxide)
ggplot(aes(x = prop.sulfur.dioxide, fill = I('red'), color = I('black')), data = white.wine) +
geom_histogram(binwidth = 0.05) +
scale_x_continuous(breaks = seq(0, 0.8, 0.1 )) +
xlab("Proportion of Free to Total Sulfur Dioxide")
summary(white.wine$prop.sulfur.dioxide)
ggplot(aes(x = density, fill = I('red'), color = I('black')), data = white.wine) +
geom_histogram(binwidth = 0.001) +
scale_x_continuous(breaks = seq(0, 1.05, 0.005)) +
xlab("Density (g/cm^3)")
with(white.wine, cor.test(density, residual.sugar))
with(white.wine, cor.test(density, alcohol))
ggplot(aes(x = pH, fill = I('red'), color = I('black')), data = white.wine) +
geom_histogram(binwidth = 0.05) +
scale_x_continuous(breaks = seq(2.5, 4, 0.1)) +
xlab("pH")
ggplot(aes(x = sulphates, fill = I('red'), color = I('black')), data = white.wine) +
geom_histogram(binwidth = 0.05) +
scale_x_continuous(breaks = seq(0, 1.5, 0.1)) +
xlab("Sulphates (g/dm^3)")
with(white.wine, cor.test(sulphates, free.sulfur.dioxide))
with(white.wine, cor.test(sulphates, total.sulfur.dioxide))
with(white.wine, cor.test(sulphates, prop.sulfur.dioxide))
ggplot(aes(x = alcohol, fill = I('red'), color = I('black')), data = white.wine) +
geom_histogram(binwidth = 0.5) +
scale_x_continuous(breaks = seq(7, 15, 1)) +
xlab("Alcohol Content (% of Volume)")
ggplot(aes(x = density, y = residual.sugar), data = white.wine) +
geom_point(alpha = 0.2) +
scale_x_continuous(breaks = seq(0.986, 1.004, 0.002), limits = c(0.987, 1.004)) +
scale_y_continuous(breaks = seq(0, 30, 5), limits = c(0, 30)) +
xlab("Density (g/cm^3)") +
ylab("Residual Sugar (g/dm^3)") +
geom_smooth(method = "lm")
ggplot(aes(x = density, y = alcohol), data = white.wine) +
geom_point(alpha = 0.2) +
scale_x_continuous(limits = c(0.985, 1.004), breaks = seq(0.985, 1.004, 0.002)) +
scale_y_continuous(breaks = seq(8,14,1)) +
xlab("Density (g/cm^3)") +
ylab("Alcohol Content (% of Volume)") +
geom_smooth(method = "lm")
ggplot(aes(x=fixed.acidity, y = volatile.acidity), data = white.wine) +
geom_point() +
xlab("Fixed Acidity (g/dm^3)") +
ylab("Volatile Acidity (g/dm^3")
ggplot(aes(x = free.sulfur.dioxide, y = total.sulfur.dioxide), data = white.wine) +
geom_point(alpha = 0.2) +
scale_x_continuous(limits = c(0, 150), breaks = seq(0, 150, 10)) +
scale_y_continuous(limits = c(0, 400), breaks = seq(0, 400, 50)) +
geom_smooth(method = "lm") +
xlab("Free Sulfur Dioxide (g/dm^3)") +
ylab("Total Sulfur Dioxide (g/dm^3)")
ggplot(aes(x = sulphates, y = prop.sulfur.dioxide), data = white.wine) +
geom_point() +
xlab("Sulphates (g/dm^3)") +
ylab("Proportion of Free to Total Sulfur Dioxide")
ggplot(aes(x = quality, y = alcohol), data = white.wine) +
geom_boxplot() +
scale_y_continuous(breaks = seq(7,14,1)) +
xlab("Quality Rating") +
ylab("Alcohol Content (% by Volume)")
ggplot(aes(x = alcohol), data = white.wine) +
geom_histogram(binwidth = 1) +
scale_x_continuous(breaks = seq(8,14,1)) +
facet_wrap(~quality) +
xlab("Alcohol Content (% by Volume)")
ggplot(aes(x = alcohol), data = white.wine) +
geom_histogram(binwidth = 1) +
scale_x_continuous(breaks = seq(8,14,1)) +
facet_wrap(~quality, scales = "free") +
xlab("Alcohol Content (% by Volume)")
ggplot(aes(x = quality, y = pH), data = white.wine) +
geom_boxplot() +
scale_y_continuous(breaks = seq(2.7, 3.8, 0.1)) +
xlab("Quality Rating") +
ylab("pH")
with(white.wine, by(pH, quality, summary))
ggplot(aes(x = quality, y = residual.sugar), data = white.wine) +
geom_boxplot() +
scale_y_continuous(limits = c(0, 30), breaks = seq(0,30, 5)) +
ylab("Residual Sugar (g/dm^3)") +
xlab("Quality Rating")
ggplot(aes(x = quality, y = density), data = white.wine) +
geom_boxplot() +
scale_y_continuous(limits = c(0.985, 1.005))
ggplot(aes(x = density, y = residual.sugar, color = alcohol), data = white.wine) +
geom_point() +
scale_x_continuous(limits = c(0.985, 1.004), breaks = seq(0.985, 1.004, 0.002)) +
scale_y_continuous(limits = c(0,30), breaks = seq(0,30,5)) +
xlab("Density (g/cm^3)") +
ylab("Residual Sugars (g/dm^3)")
ggplot(aes(x = density, y = residual.sugar, color = quality), data = white.wine) +
geom_point() +
scale_x_continuous(limits = c(0.985, 1.004), breaks = seq(0.985, 1.004, 0.002)) +
scale_y_continuous(limits = c(0,30), breaks = seq(0,30,5)) +
xlab("Density (g/cm^3)") +
ylab("Residual Sugars (g/dm^3)") +
scale_color_brewer(type = 'qual', palette = 6)
ggplot(aes(x = density, y = alcohol, color = quality), data = white.wine) +
geom_point() +
scale_x_continuous(limits = c(0.985, 1.004), breaks = seq(0.985, 1.004, 0.002)) +
scale_y_continuous(breaks = seq(8,14,1)) +
xlab("Density (g/cm^3)") +
ylab("Alcohol content (% by Volume)") +
scale_color_brewer(type = "qual", palette = 6)
ggplot(aes(x = residual.sugar, y = alcohol, color = quality), data = white.wine) +
geom_point() +
xlim(0, 30) +
ylab("Alcohol content (% by Volume)") +
xlab("Residual Sugars (g/dm^3)") +
scale_color_brewer(type = 'qual', palette = 6)
plot1 <- ggplot(aes(x = residual.sugar, y = alcohol, color = quality), data = subset(white.wine, quality == 9 | quality == 8 | quality ==7)) +
geom_point() +
xlim(0, 30) +
xlab("Residual Sugars (g/dm^3)") +
ylab("Alcohol content (% by Volume)") +
scale_color_brewer(type = 'qual', palette = 6)
plot2 <- ggplot(aes(x = residual.sugar, y = alcohol, color = quality), data = subset(white.wine, quality == 3 | quality == 4 | quality ==5)) +
geom_point() +
xlim(0, 30) +
xlab("Residual Sugars (g/dm^3)") +
ylab("Alcohol content (% by Volume)") +
scale_color_brewer(type = 'qual', palette = 6)
grid.arrange(plot1, plot2, ncol=1)
ggplot(aes(x=free.sulfur.dioxide, y = total.sulfur.dioxide, color = sulphates), data = white.wine) +
geom_point()
ggplot(aes(x=free.sulfur.dioxide, y = total.sulfur.dioxide, color = sulphates), data = white.wine) +
geom_point() +
scale_x_continuous(limits = c(0, 100))
ggplot(aes(x=free.sulfur.dioxide, y = total.sulfur.dioxide, color = sulphates), data = white.wine) +
geom_point() +
scale_x_continuous(limits = c(0, 100)) +
scale_y_continuous(limits = c(0,300))
ggplot(aes(x=free.sulfur.dioxide, y = total.sulfur.dioxide, color = sulphates), data = white.wine) +
geom_point() +
scale_x_continuous(limits = c(0, 100)) +
scale_y_continuous(limits = c(0,300)) +
ylab("Total Sulfur Dioxide") +
xlab("Free Sulfur Dioxide")
ggplot(aes(x=free.sulfur.dioxide, y = total.sulfur.dioxide, color = sulphates), data = white.wine) +
geom_point() +
scale_x_continuous(limits = c(0, 100), breaks = seq(0,100,25)) +
scale_y_continuous(limits = c(0,300)) +
ylab("Total Sulfur Dioxide") +
xlab("Free Sulfur Dioxide")
ggplot(aes(x=free.sulfur.dioxide, y = total.sulfur.dioxide, color = sulphates), data = white.wine) +
geom_point() +
scale_x_continuous(limits = c(0, 100), breaks = seq(0,100,20)) +
scale_y_continuous(limits = c(0,300)) +
ylab("Total Sulfur Dioxide") +
xlab("Free Sulfur Dioxide")
ggplot(aes(x=free.sulfur.dioxide, y = total.sulfur.dioxide, color = sulphates), data = white.wine) +
geom_point() +
scale_x_continuous(limits = c(0, 100), breaks = seq(0,100,20)) +
scale_y_continuous(limits = c(0,300), breaks = seq(0,300,25)) +
ylab("Total Sulfur Dioxide") +
xlab("Free Sulfur Dioxide")
ggplot(aes(x=free.sulfur.dioxide, y = total.sulfur.dioxide, color = sulphates), data = white.wine) +
geom_point() +
scale_x_continuous(limits = c(0, 100), breaks = seq(0,100,20)) +
scale_y_continuous(limits = c(0,300), breaks = seq(0,300,50)) +
ylab("Total Sulfur Dioxide") +
xlab("Free Sulfur Dioxide")
```{r echo=FALSE, message=FALSE, warning=FALSE}
ggplot(aes(x=free.sulfur.dioxide, y = total.sulfur.dioxide, color = sulphates), data = white.wine) +
geom_point() +
scale_x_continuous(limits = c(0, 100), breaks = seq(0,100,20)) +
scale_y_continuous(limits = c(0,300), breaks = seq(0,300,50)) +
ylab("Total Sulfur Dioxide") +
xlab("Free Sulfur Dioxide")
library(memisc)
m1 <- lm(quality ~ alcohol, data = diamonds)
m1 <- lm(I(quality) ~ alcohol, data = diamonds)
m1 <- lm(quality ~ alcohol, data = white.wine)
m2 <- update(m1, ~ . + pH)
mtable(m1, m2)
newWine <- data.frame(alcohol = 12.0, pH = 2.98)
modelEstimate <- predict(m2, newdata = newWine, interval =
)
modelEstimate <- predict(m2, newdata = newWine, interval = "prediction")
ggplot(aes(x = quality, fill = I('red'), color = I('black')), data = white.wine) +
geom_bar() +
xlab("Quality Level")
ggplot(aes(x = quality, y = alcohol), data = white.wine) +
geom_boxplot() +
scale_y_continuous(breaks = seq(7,14,1)) +
xlab("Quality Rating") +
ylab("Alcohol Content (% by Volume)")
ggplot(aes(x = density, y = residual.sugar, color = alcohol), data = white.wine) +
geom_point() +
scale_x_continuous(limits = c(0.985, 1.004), breaks = seq(0.985, 1.004, 0.002)) +
scale_y_continuous(limits = c(0,30), breaks = seq(0,30,5)) +
xlab("Density (g/cm^3)") +
ylab("Residual Sugars (g/dm^3)")
ggplot(aes(x = density, y = residual.sugar, color = alcohol), data = white.wine) +
geom_point() +
scale_x_continuous(limits = c(0.985, 1.004), breaks = seq(0.985, 1.004, 0.002)) +
scale_y_continuous(limits = c(0,30), breaks = seq(0,30,5)) +
xlab("Density (g/cm^3)") +
ylab("Residual Sugars (g/dm^3)")
